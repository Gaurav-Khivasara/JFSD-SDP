package com.klef.jfsd.sdp.service;

import java.util.Date;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.klef.jfsd.sdp.model.User;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Service
public class JwtService {
	
	@Value("${spring.application.security.jwt.secretKey}")
	private String secretKey;
	
	public String generateToken(User user) {
		return Jwts.builder()
				.subject(Long.valueOf(user.getUserId()))
				.issuedAt(new Date())
				.expiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24)) // 1day = 1hr * 24
				.signWith(key())
				.compact();
	}
	
	private SecretKey key() {
		return Keys.hmacShaKeyFor(Decoders.BASE64URL.decode(secretKey));
	}
	
	private Claims extractAllExclaims(String token) {
		return Jwts.parser()
				.verifyWith(key())
				.build()
				.parseSignedClaims(token)
				.getPayload();
	}
	
	public long extractId(String token) {
		return Long.valueOf(extractAllExclaims(token).getSubject());
	}
	
	public boolean validate(String token, User user) {
		return (extractId(token) == user.getUsername())
				&& !extractAllExclaims(token).getExpiration().before(new Date()));
	}

}
