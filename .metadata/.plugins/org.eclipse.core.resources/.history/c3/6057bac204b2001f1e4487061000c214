package com.klef.jfsd.sdp.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.klef.jfsd.sdp.dto.EmailVerificationDTO;
import com.klef.jfsd.sdp.dto.TokenSuccessDTO;
import com.klef.jfsd.sdp.model.EmailVerification;
import com.klef.jfsd.sdp.model.ForgotPassword;
import com.klef.jfsd.sdp.service.EmailVerificationServiceImpl;
import com.klef.jfsd.sdp.service.ForgotPasswordServiceImpl;

import jakarta.mail.MessagingException;
import jakarta.servlet.http.HttpServletRequest;

import org.springframework.web.bind.annotation.RequestBody;

@RestController
@RequestMapping("/api/emails")
public class EmailController {
	
	@Autowired
	private ForgotPasswordServiceImpl forgotPasswordService;
	
	// User resend dabata hai to check agar already verified user h to terminate with msg	// Else koi unexpired token h to resend it	// Else Create a new token and send it
	@PostMapping("/email-verification/send")
	public ResponseEntity<EmailVerificationDTO> sendMail(@RequestBody EmailVerification emailVerification) throws MessagingException {
	// public ResponseEntity<String> sendMail(@RequestBody EmailVerification emailVerification) throws MessagingException {
		String msg = emailVerificationService.sendMail(emailVerification);
		
		HttpStatus status = msg.equals("Email sent Successfully!") ? HttpStatus.OK :
			(msg.equals("Email already verified!") ? HttpStatus.CONFLICT : HttpStatus.INTERNAL_SERVER_ERROR);
		
		// Sending all details of emailVerification model  with msg and status to client
		// Bcuz sometimes email might not be sent through KL WiFi
		// Else just return with msg and status
		return new ResponseEntity<>(new EmailVerificationDTO(emailVerification, msg), status);
		// return new ResponseEntity<>(msg, status);
	}
	
	
	
	@PostMapping("/forgot-password/send")
	public ResponseEntity<ForgotPassword> send(@RequestBody ForgotPassword fp) {
		String msg = forgotPasswordService.sendMail(fp);
//		HttpStatus status = 
		return new ResponseEntity<>(fp, HttpStatus.OK);
	}
	
	@PostMapping("/forgot-password/verify")
	public String resetPassword(HttpServletRequest request) {
		String str = request.getParameter("1") + request.getParameter("2");
		return """
				<h2>%s</h2
				""".formatted(str);
	}
	
}
